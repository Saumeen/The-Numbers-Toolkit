// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  password      String?
  emailVerified DateTime? @map("email_verified")
  points        Int       @default(0)
  badges        Json?
  completed_weeks Json?   @map("completed_weeks")
  completed_products Json? @map("completed_products")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  purchases     Purchase[]
  achievements  Achievement[]
  progress      UserProgress[]
  accounts      Account[]
  sessions      Session[]
  
  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  display_price Float?  @map("display_price") // Display price for intro pricing (strike-through)
  stripe_id   String?  @unique @map("stripe_id")
  key         String?  @unique // Unique key for functionality control
  course_type String?  @default("individual") @map("course_type") // 'individual' or 'bundle'
  content_data Json?   @map("content_data") // Store lesson content directly in product
  sort_order  Int      @default(0) @map("sort_order")
  is_active   Boolean  @default(true) @map("is_active")
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  purchases   Purchase[]
  lessons     Lesson[]
  
  @@map("products")
}

model Purchase {
  id          String   @id @default(cuid())
  user_id      String
  product_id   String
  stripe_id    String?  @unique
  amount      Float
  status      String   // 'pending', 'completed', 'failed', 'cancelled'
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt
  
  // Relations
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  @@map("purchases")
}


model Lesson {
  id              String   @id @default(cuid())
  title           String
  description     String?
  content         String?
  video_url       String?  @map("video_url")
  practice_sheet_url String? @map("practice_sheet_url")
  duration        Int?     // in minutes
  sort_order      Int      @default(0) @map("sort_order")
  is_active       Boolean  @default(true) @map("is_active")
  product_id      String   @map("product_id") // Required - every lesson belongs to a product
  created_at      DateTime @default(now()) @map("created_at")
  updated_at      DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  product         Product        @relation(fields: [product_id], references: [id], onDelete: Cascade)
  progress        UserProgress[]
  
  @@map("lessons")
}

model Download {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  fileSize    Int?     // in bytes
  sort_order   Int      @default(0)
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt
  
  @@map("downloads")
}

model Achievement {
  id          String   @id @default(cuid())
  title       String
  description String?
  icon        String?
  points      Int      @default(0)
  user_id      String
  earned_at    DateTime @default(now()) @map("earned_at")
  
  // Relations
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@map("achievements")
}

model UserProgress {
  id          String   @id @default(cuid())
  user_id     String   @map("user_id")
  lesson_id   String   @map("lesson_id")
  completed   Boolean  @default(false)
  progress    Float    @default(0) // 0-100 percentage
  time_spent  Int      @default(0) @map("time_spent") // in seconds
  last_accessed DateTime @default(now()) @map("last_accessed")
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, lesson_id])
  @@map("user_progress")
}

model StripeEvent {
  id        String   @id @default(cuid())
  eventId   String   @unique
  type      String
  data      Json
  processed Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@map("stripe_events")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model ConsultantQuote {
  id                String   @id @default(cuid())
  full_name         String
  email             String
  issue_description String
  success_criteria  String
  urgency           String   @default("Flexible")
  file_urls         String[] // Array of file URLs
  preferred_format  String[] // Array of preferred formats (Live call, Done-for-you solution)
  agreement_accepted Boolean @default(false)
  status            String   @default("pending") // pending, quoted, approved, completed, cancelled
  quote_amount      Float?
  notes             String?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt
  
  @@map("consultant_quotes")
}
